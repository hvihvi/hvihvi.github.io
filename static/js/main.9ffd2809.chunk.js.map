{"version":3,"sources":["knees/logo.jpg","components/const.js","components/NavBar.js","components/Card.js","about/AboutUs.js","knees/KneesLogo.js","knees/Knees.js","home/Home.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","zIndex","Content","styled","div","_templateObject","_ref","className","children","links","react_default","a","createElement","Fragment","_templateObject2","Card_templateObject","AboutUs","Card","src","logo","alt","KneesLogo_templateObject","Knees","knees_KneesLogo","Home","NavLink","Button_templateObject","App","BrowserRouter","components_NavBar","Button","exact","to","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4MCG3BC,EACH,EADGA,EAEL,4fCDR,IAAMC,EAAUC,IAAOC,IAAVC,KAcEF,cAXA,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,SAAUC,EAAxBH,EAAwBG,MAAxB,OACbC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKL,UAAWA,GAAYE,IAE9BC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACV,EAAD,KAAUM,MAKDL,CAAfW,IAOab,0aCtBEE,UAAOC,IAAtBW,IAEad,GCYEe,EAdC,kBACdN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAAA,gCAEFF,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAAA,qKCRN,IAIeT,cAJG,SAAAG,GAAA,IAAGC,EAAHD,EAAGC,UAAH,OAChBG,EAAAC,EAAAC,cAAA,OAAKL,UAAWA,EAAWW,IAAKC,IAAMC,IAAKD,OAG9BhB,CAAfkB,KCmBeC,EAvBD,SAAAhB,KAAGC,UAAH,OACZG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACW,EAAD,OAEFb,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACW,EAAD,OAEFb,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACW,EAAD,OAEFb,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACW,EAAD,OAEFb,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACW,EAAD,OAEFb,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAACW,EAAD,SCpBSC,EAAA,kBAAMd,EAAAC,EAAAC,cAAA,gmBCCNT,kBAAOsB,IAAPtB,CAAfuB,KCyBeC,EApBH,SAAArB,GAAA,IAAGC,EAAHD,EAAGC,UAAH,OACVG,EAAAC,EAAAC,cAAA,OAAKL,UAAWA,GACdG,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACiB,EAAD,CACEpB,MAAO,CACLC,EAAAC,EAAAC,cAACkB,EAAD,CAAQC,OAAK,EAACC,GAAG,KAAjB,QACAtB,EAAAC,EAAAC,cAACkB,EAAD,CAAQE,GAAG,UAAX,SACAtB,EAAAC,EAAAC,cAACkB,EAAD,CAAQE,GAAG,UAAX,cAGFtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,IAAIC,UAAWX,IACjCd,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,SAASC,UAAWb,IACtCZ,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,SAASC,UAAWnB,SCT5BoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ffd2809.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b7124b82.jpg\";","/**\n * Permet de positionner les components plus ou moins vers l'avant\n */\nexport const zIndex = {\n  navBar: 2,\n  card: 1\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { zIndex } from \"./const\";\n\nconst Content = styled.div`\n  padding-top: 80px;\n`;\nconst NavBar = ({ className, children, links }) => (\n  <>\n    <header>\n      <div className={className}>{links}</div>\n    </header>\n    <main>\n      <Content>{children}</Content>\n    </main>\n  </>\n);\n\nexport default styled(NavBar)`\n  display: flex;\n  flex-direction: table-column;\n  width: 100%;\n  box-sizing: border-box;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n  background-color: #333;\n  z-index: ${zIndex.navBar};\n  padding-top: 1em;\n  padding-bottom: 1em;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  left: auto;\n  right: 0;\n`;\n","import styled from \"styled-components\";\nimport { zIndex } from \"./const\";\n\nexport default styled.div`\n  overflow: hidden;\n  z-index: ${zIndex.card};\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n  transition: box-shadow 0.2s ease-in-out;\n  background-color: white;\n  border-radius: 2px;\n  margin: 1rem;\n  position: relative;\n  &:hover {\n    box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);\n  }\n`;\n","import React from \"react\";\nimport Card from \"../components/Card\";\n\nconst AboutUs = () => (\n  <>\n    <Card>\n      <h1>Victor Vinet</h1>\n    </Card>\n    <Card>\n      <h1>Alexandre Dupouey</h1>\n    </Card>\n    <Card>\n      <h1>Hugo Vinet</h1>\n    </Card>\n  </>\n);\n\nexport default AboutUs;\n","import React from \"react\";\nimport logo from \"./logo.jpg\";\nimport styled from \"styled-components\";\n\nconst KneesLogo = ({ className }) => (\n  <img className={className} src={logo} alt={logo} />\n);\n\nexport default styled(KneesLogo)`\n  width: 10em;\n  height: auto;\n  padding: 1em;\n`;\n","import React from \"react\";\nimport KneesLogo from \"./KneesLogo\";\nimport Card from \"../components/Card\";\n\nconst Knees = ({ className }) => (\n  <>\n    <Card>\n      <KneesLogo />\n    </Card>\n    <Card>\n      <KneesLogo />\n    </Card>\n    <Card>\n      <KneesLogo />\n    </Card>\n    <Card>\n      <KneesLogo />\n    </Card>\n    <Card>\n      <KneesLogo />\n    </Card>\n    <Card>\n      <KneesLogo />\n    </Card>\n  </>\n);\n\nexport default Knees;\n","import React from \"react\";\n\nexport default () => <div>Home</div>;\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default styled(NavLink)`\n  text-decoration: none;\n  text-transform: uppercase;\n  text-align: center;\n  box-sizing: border-box;\n  min-width: 64px;\n  min-height: 36px;\n  padding: 8px 16px;\n  margin: 0px 5px;\n  color: grey;\n  border-radius: 2px;\n  background-color: transparent;\n  transition: background-color 0.4s linear;\n  &.active {\n    background-color: whitesmoke;\n  }\n  &:hover {\n    text-decoration: none;\n    background-color: whitesmoke;\n  }\n  @media (hover: none) {\n    background-color: transparent;\n  }\n`;\n","import React from \"react\";\nimport { BrowserRouter, Link, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport AboutUs from \"./about/AboutUs\";\nimport Knees from \"./knees/Knees\";\nimport Home from \"./home/Home\";\nimport Button from \"./components/Button\";\n\nconst App = ({ className }) => (\n  <div className={className}>\n    <BrowserRouter>\n      <>\n        <NavBar\n          links={[\n            <Button exact to=\"/\">Home</Button>,\n            <Button to=\"/knees\">Knees</Button>,\n            <Button to=\"/about\">About Us</Button>\n          ]}\n        >\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/knees\" component={Knees} />\n          <Route exact path=\"/about\" component={AboutUs} />\n        </NavBar>\n      </>\n    </BrowserRouter>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}